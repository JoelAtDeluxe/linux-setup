# ansible-configured
---

- name: Update Repos, bundled software
  hosts: localhost
  tasks:
    - name: Ubuntu
      apt: 
        name: "*"
        state: latest
        upgrade: yes
        update_cache: yes
      when: ansible_distribution == 'Ubuntu'
    - name: Fedora
      dnf:
        name: "*"
        state: latest
      when: ansible_distribution == 'Fedora'

- name: Common Tools
  hosts: localhost
  become: yes
  vars:
    std_software:
      - git
      - wget
      - curl
      - vim
      - konsole
      - zsh
      - unzip
  tasks:
    - name: Add standard tooling (Ubuntu)
      apt: 
        state: latest
      with_items: "{{ std_software }}"
      when: ansible_distribution == 'Ubuntu'
    - name: Add Standard Tooling (Fedora)
      dnf:
        name: '{{item}}'
        state: latest
      with_items: "{{ std_software }}"
      when: ansible_distribution == 'Fedora'

- name: Developer Tools
  # Two flavors of tools: Stuff we'll use directly
  # Stuff we'll use indirectly (e.g. maybe erlang requires gcc)
  hosts: localhost
  become: true
  vars:
    std_software:
      - dkms
      - gcc
      - acpid
      - autoconf
      - automake
      - make
      - inotify-tools
  tasks: 
    - name: Setup Git Creds
      block:
        - name: Ubuntu
          when: ansible_distribution == 'Ubuntu'
          block:
            - name: Build libsecret
              shell: make
              args:
                chdir: /usr/share/doc/git/contrib/credential/libsecret
            - name: Set libsecret
              git_config:
                scope: global
                name: credential.helper
                value: /usr/libexec/git-core/git-credential-libsecret
        - name: Fedora
          when: ansible_distribution == 'Fedora'
          git_config:
            scope: global
            name: credential.helper
            value: /usr/libexec/git-core/git-credential-libsecret
    - name: Add Tooling
      block:
        - when: ansible_distribution == 'Ubuntu'
          block: 
            - apt: 
                name: "{{ item }}"
                state: latest
              with_items: "{{ std_software }}"
            - apt:
                name: " {{ item }} "
                state: latest
              with_items:
                - libssl-dev
                - ncurses-dev
                - apt-transport-https
                - ca-certificates
                - software-properties-common
        - when: ansible_distribution == 'Fedora'
          block: 
            - dnf:
                name: "{{ item }}"
                state: latest
              with_items: "{{ std_software }}"
            - dnf:
                name: "{{ item }}"
                state: latest
              with_items:
                - kernel-devel
                - kernel-headers
                - libglvnd-glx
                - libglvnd-opengl
                - libglvnd-devel
                - pkgconfig
                - dnf-plugins-core
                - openssl-devel
                - glib2-devel
                - ncurses-devel
    - name: Add Docker
      block:
        # TODO: add in Ubuntu support
        # - when: ansible_distribution == 'Ubuntu'
          # block:
          #   - apt_repository:
          #     repo: 
        - when: ansible_distribution == 'Fedora'
          block:
            - yum_repository:
                name: docker-ce
                description: Docker (community edition) repo
                baseurl: https://download.docker.com/linux/fedora/docker-ce.repo
            - dnf:
                state: latest
                name: docker-ce
      rescue:
        - debug: msg="Unable to install docker"
    # - name: Something
    #   block:
    #     - name: Ubuntu
    #       when: ansible_distribution == 'Ubuntu'
    #     - name: Fedora
    #       when: ansible_distribution == 'Fedora'

- name: OhMyZSH + configurations
  hosts: localhost
  become: yes
  become_user: "{{ user }}"
  vars:
    home: "/home/{{ user }}"
  tasks:
    - name: Get OhMyZSH
      shell: "sh -c '$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)'"
    - name: Update Path
      shell: "echo -e '\nexport PATH=$HOME/bin:/usr/bin:$HOME/.local/bin:$PATH' >> {{ home }}/.zshrc"
    - name: Spot for Goapth
      # This is noticably missing from bashrc
      shell: "echo -e '\nexport GOPATH=' >> {{ home }}/.zshrc"
    # TODO: set theme to agnoster
    # TODO: Set plugins to git, dotenv
    # TODO: if completely overwriting, source $ZSH/oh-my-zsh.sh

- name: ASDF version manager
  hosts: localhost
  vars:
    home: "/home/{{ user }}"
    asdf_root: "{{ home }}/.asdf"
    asdf: "{{ asdf_root }}/bin/asdf"
  tasks:
    - name: Clone project
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ asdf_root }}"
        refspec: v0.4.3
    - name: Update Bash/Zsh
      block:
        - shell: "echo -e '\n. {{ asdf_root }}/asdf.sh' >> {{ home }}/.bashrc"
        - shell: "echo -e '\n. {{ asdf_root }}/completions/asdf.bash' >> {{ home }}/.bashrc"
        - shell: "echo -e '\n. {{ asdf_root }}/asdf.sh' >> {{ home }}/.zshrc"
        - shell: "echo -e '\n. {{ asdf_root }}/completions/asdf.bash' >> {{ home }}/.zshrc"
    - name: Update Project
      shell: "{{ asdf }} update"
    - name: Add Elixir
      block:
        - shell: "{{ asdf }} plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git"
        - shell: "{{ asdf }} install erlang 20.3"
        - shell: "{{ asdf }} global  erlang 20.3"
        - shell: "{{ asdf }} plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git"
        - shell: "{{ asdf }} install elixir 1.6"
        - shell: "{{ asdf }} global  elixir 1.6"
    - name: Add Golang
      block:
        - shell: "{{ asdf }} plugin-add golang https://github.com/kennyp/asdf-golang.git"
        - shell: "{{ asdf }} install golang 1.10"
        - shell: "{{ asdf }} global  golang 1.10"
    - name: Add Rust
      block:
        - shell: "{{ asdf }} plugin-add rust https://github.com/code-lever/asdf-rust.git"
        - shell: "{{ asdf }} install rust 1.26.0"
        - shell: "{{ asdf }} global  rust 1.26.0"
    - name: Add Nodejs
      block:
        - shell: "{{ asdf }} plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git"
        - shell: "{{ asdf }} install nodejs 10.2.1"
        - shell: "{{ asdf }} install nodejs 8.11.2"
        - shell: "{{ asdf }} global  nodejs 10.2.1"
    - name: Add Elm
      block:
        - shell: "{{ asdf }} plugin-add elm https://github.com/vic/asdf-elm.git"
        - shell: "{{ asdf }} install elm 0.18.0"
        - shell: "{{ asdf }} global  elm 0.18.0"

- name: Install Cool fonts
  hosts: localhost
  become: yes
  vars:
    font_base: /usr/share/fonts
  tasks:
    - name: Zipped TTF fonts
      block: 
        - get_url:
          url: "{{ item.url }}"
          dest: "/tmp/{{ item.name }}.zip"
        - file: 
            state: directory 
            path: "{{ font_base }}/{{ item.name }}"
        - unarchive:
          src: "/tmp/{{ item.name }}.zip"
          dest: "/tmp/{{ item.name }}"
        - copy:
            src: "/tmp/{{ item.name }}/ttf/*.tmp"
            dest: "{{ font_base }}/{{ item.name }}"
        - file: 
            state: absent 
            path: "/tmp/{{ item.name }}*"
      with_items:
        - { name: 'firacode', url: 'https://github.com/tonsky/FiraCode/releases/download/1.205/FiraCode_1.205.zip' }
        - { name: 'hack',     url: 'https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip' }
      
    # - name: FiraCode
    #   vars:
    #     font:
    #       name: firacode
    #       url: https://github.com/tonsky/FiraCode/releases/download/1.205/FiraCode_1.205.zip
    #       dest: "{{ font_base }}/{{ font_name }}"
    #       src: "/tmp/{{ font_name }}"
    #   block: 
    #     - get_url:
    #       url: {{ font['url'] }}
    #       dest: "{{ font['src'] }}.zip"
    #     - file: state=directory path={{ font_dest }}
    #     - unarchive:
    #       src: "{{ font['src'] }}.zip"
    #       dest: {{ font['src'] }}
    #     - copy:
    #         src: {{ font['src'] }}/ttf/*.tmp
    #         dest: {{ font['dest'] }}
    #     - file: state=absent path="{{ font['src'] }}*"
