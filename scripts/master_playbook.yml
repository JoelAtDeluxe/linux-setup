# ansible-configured
---

- name: Update Repos, bundled software
  hosts: localhost
  become: yes
  tasks:
    - name: Ubuntu
      apt: 
        name: "*"
        state: latest
        upgrade: yes
        update_cache: yes
      when: ansible_distribution == 'Ubuntu'
    - name: Fedora
      dnf:
        name: "*"
        state: latest
      when: ansible_distribution == 'Fedora'

- name: Common Tools
  hosts: localhost
  become: yes
  vars:
    std_software:
      - git
      - wget
      - curl
      - vim
      - konsole
      - zsh
      - unzip
  tasks:
    - name: Add standard tooling
      package: 
        name: '{{item}}'
        state: present
      with_items: '{{std_software}}'

- name: Install User tools
  hosts: localhost
  become: yes
  vars:
    generic_utilities:
      - filezilla
      - gparted
      - gnome-tweak-tool
      - mediainfo
      - chrome-gnome-shell
      - gnome-disk-utility
      - VirtualBox
      - pithos
      - yarn

    distro_utils:
      - { deb: 'imagemagick',  rpm: 'ImageMagick'}

    pkg_files:
      - { name: '/tmp/vivaldi', deb_url: 'https://downloads.vivaldi.com/stable/vivaldi-stable_1.14.1077.60-1_amd64.deb',               
                                rpm_url: 'https://downloads.vivaldi.com/stable/vivaldi-stable-1.14.1077.60-1.x86_64.rpm' }
      - { name: '/tmp/bcmp',    deb_url: 'https://www.scootersoftware.com/bcompare-4.2.4.22795_amd64.deb',                             
                                rpm_url: 'https://www.scootersoftware.com/bcompare-4.2.4.22795.x86_64.rpm' }
      - { name: '/tmp/slack',   deb_url: 'https://downloads.slack-edge.com/linux_releases/slack-desktop-3.2.0-beta25a7a50e-amd64.deb', 
                                rpm_url: 'https://downloads.slack-edge.com/linux_releases/slack-3.1.1-0.1.fc21.x86_64.rpm' }
      - { name: '/tmp/vagrant', deb_url: 'https://releases.hashicorp.com/vagrant/2.1.1/vagrant_2.1.1_x86_64.deb',                      
                                rpm_url: 'https://releases.hashicorp.com/vagrant/2.0.4/vagrant_2.0.4_x86_64.rpm' }
      - { name: '/tmp/vscode',  deb_url: 'https://az764295.vo.msecnd.net/stable/3aeede733d9a3098f7b4bdc1f66b63b0f48c1ef9/code_1.22.2-1523551015_amd64.deb', 
                                rpm_url: 'https://az764295.vo.msecnd.net/stable/3aeede733d9a3098f7b4bdc1f66b63b0f48c1ef9/code-1.22.2-1523551168.el7.x86_64.rpm' }
  tasks:
    - name: Prep Distros
      block:
        - when: ansible_distribution == 'Fedora'
          block:
            - name: Add plugin manager
              dnf:
                item: dnf-plugins-core
                sate: latest
            - name: Add Repos
              yum_repository:
                name: "{{ item.name }}"
                description: "{{ item.description }}"
                baseurl: "{{ item.url }}"
              # command: "dnf config-manager --add-repo {{item.url}}"
              with_items:
                - { name: 'yarn',                description: 'Yarn Yum Repo',                url: 'https://dl.yarnpkg.com/rpm/yarn.repo' }
                - { name: 'rpm-fusion-free',     description: 'Free RPM Fusion yum repo',     url: 'https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_version}}.noarch.rpm' }
                - { name: 'rpm-fusion-non-free', description: 'Non-Free RPM Fusion yum repo', url: 'https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_version}}.noarch.rpm' }
              
    - name: Get/Install RPMs/deb files
      block:
        - when: ansible_distribution == 'Ubuntu'
          block:
            - get_url:
                url: "{{ item.deb_url }}"
                dest: "{{ item.name }}.deb"
              with_items: "{{pkg_files}}"
            - apt: 
                name: "{{ item.name }}.deb"
                state: latest
              with_items: 
                - "{{ pkg_files }}"
                - { name: '/tmp/crossftp', deb_url: 'http://www.crossftp.com/crossftp_1.98.8.deb' }
        - when: ansible_distribution == 'Fedora'
          block:
            - get_url:
                url: "{{ item.rpm_url }}"
                dest: "{{ item.name }}.rpm"
              with_items: "{{pkg_files}}"
            - dnf: 
                name: "{{ item.name }}.rpm"
                state: latest
              with_items: "{{pkg_files}}"

    - name: Install generic files
      package:
        name: '{{item}}'
        state: present
      with_items: "{{generic_utilities}}"

    - name: Install pre-packaged software
      block:
        - when: ansible_distribution == 'Ubuntu'
          apt:
            name: "{{ item.deb }}"
            state: latest
          with_items:
            - "{{ distro_utils }}"
            - { deb: nfs-kernel-server }
            - { deb: virtualbox-guest-dkms }
            - { deb: nautilus-open-terminal }
        - when: ansible_distribution == 'Fedora'
          dnf:
            name: "{{ item.rpm }}"
            state: latest
          with_items:
            - "{{ distro_utils }}"
            - { rpm: gnome-terminal-nautilus }
    
    # - name: Install VSCode extensions
    #   block:
    #     # Markdown linter
    #     - shell: code --install-extension DavidAnson.vscode-markdownlint
    #     - shell: code --install-extension yzhang.markdown-all-in-one
    #     # XML Tools (parsing, etc)
    #     - shell: code --install-extension DotJoshJohnson.xml
    #     # Material Icons
    #     - shell: code --install-extension PKief.material-icon-theme
    #     # Docker
    #     - shell: code --install-extension PeterJausovec.vscode-docker
    #     # Git History
    #     - shell: code --install-extension donjayamanne.githistory
    #     # Theme: Dark+ for elixir
    #     - shell: code --install-extension kkalita.dark-plus-elixir
    #     # Go lang support
    #     - shell: code --install-extension lukehoban.Go
    #     # Elixir support
    #     - shell: code --install-extension mjmcloug.vscode-elixir
    #     # Python support
    #     - shell: code --install-extension ms-python.python
    #     # Chrome Debugger
    #     - shell: code --install-extension msjsdiag.debugger-for-chrome
    #     # Rubby support
    #     - shell: code --install-extension rebornix.Ruby
    #     # Diffing
    #     - shell: code --install-extension ryu1kn.partial-diff
    #     # HCL/nomad
    #     - shell: code --install-extension wholroyd.hcl
    #     # VS Code Live Share
    #     - shell: code --install-extension MS-vsliveshare.vsliveshare
    #     # .env loader
    #     - shell: code --install-extension mikestead.dotenv
    #     # Case-changer
    #     - shell: code --install-extension wmaurer.change-case
          
- name: Developer Tools
  # Two flavors of tools: Stuff we'll use directly
  # Stuff we'll use indirectly (e.g. maybe erlang requires gcc)
  hosts: localhost
  become: yes
  vars:
    std_software:
      - dkms
      - gcc
      - acpid
      - autoconf
      - automake
      - make
      - inotify-tools
      - ctags
  tasks: 
    - name: Setup Git Creds
      block:
        - when: ansible_distribution == 'Ubuntu'
          block:
            - name: Build libsecret
              shell: make
              args:
                chdir: /usr/share/doc/git/contrib/credential/libsecret
        - name: Set libsecret
          become: no
          git_config:
            scope: global
            name: credential.helper
            value: /usr/libexec/git-core/git-credential-libsecret

    - name: Add Tooling
      block:
        - package:
            state: present
            name: '{{ item }}'
          with_items: '{{ std_software }}'
        - when: ansible_distribution == 'Ubuntu'
          apt: 
            name: "{{ item }}"
            state: latest
          with_items: 
            - libssl-dev
            - ncurses-dev
            - apt-transport-https
            - ca-certificates
            - software-properties-common                
        - when: ansible_distribution == 'Fedora'
          dnf:
            name: "{{ item }}"
            state: latest
          with_items: 
            - kernel-devel
            - kernel-headers
            - libglvnd-glx
            - libglvnd-opengl
            - libglvnd-devel
            - pkgconfig
            - openssl-devel
            - glib2-devel
            - ncurses-devel

    - name: Add Docker
      block:
        # TODO: add in Ubuntu support
        - when: ansible_distribution == 'Ubuntu'
          block:
            - apt_repository:
                repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu"
                state: present
        - when: ansible_distribution == 'Fedora'
          block:
            - yum_repository:
                name: docker-ce
                description: Docker (community edition) repo
                baseurl: https://download.docker.com/linux/fedora/docker-ce.repo
        - package:
            state: present
            name: docker-ce

      rescue:
        - debug: 
            msg: "Unable to install docker"
    # - name: Something
    #   block:
    #     - name: Ubuntu
    #       when: ansible_distribution == 'Ubuntu'
    #     - name: Fedora
    #       when: ansible_distribution == 'Fedora'

- name: OhMyZSH + configurations
  hosts: localhost
  vars:
    home: "{{ansible_env.HOME}}"
    gopath: "{{home}}/Projects/golang"
  tasks:
    - name: Get OhMyZSH
      shell: "sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
    - name: Update Path
      shell: "echo -e '\nexport PATH=$HOME/bin:/usr/bin:$HOME/.local/bin:$PATH' >> {{ home }}/.zshrc"
    - name: Spot for Goapth
      block:
        - shell: "echo -e '\nexport GOPATH=' >> {{ home }}/.zshrc"
        - shell: "echo -e '\nexport GOPATH=' >> {{ home }}/.bashrc"
    - name: Update Zsh theme
      # shell: "sed 's/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"agnoster\"/' {{ home }}/.zshrc > {{ home }}/.zshrc"
      lineinfile:
        path: "{{ home }}/.zshrc"
        regexp: '^ZSH_THEME=.*'
        line: 'ZSH_THEME="agnoster"'


- name: ASDF version manager
  hosts: localhost
  vars:
    home: "{{ansible_env.HOME}}"
    asdf_root: "{{ home }}/.asdf"
    asdf: "{{ asdf_root }}/bin/asdf"
    sdks: 
      - { lang: erlang, url: "https://github.com/asdf-vm/asdf-erlang.git", version: 20.3 }
      - { lang: elixir, url: "https://github.com/asdf-vm/asdf-elixir.git", version: 1.6 }
      - { lang: golang, url: "https://github.com/kennyp/asdf-golang.git",  version: 1.10 }

      # - { lang: nodejs, url: "https://github.com/asdf-vm/asdf-nodejs.git",          version: 10.7.0 }  # Problems verifying this version
      - { lang: elm,    url: "https://github.com/vic/asdf-elm.git",                 version: 0.18.0 }
      - { lang: kotlin, url: "https://github.com/missingcharacter/asdf-kotlin.git", version: 1.2.51 }
  tasks:
    - name: Clone project
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ asdf_root }}"
        refspec: v0.4.3

    - name: Update Bash/Zsh
      block:
        - shell: "echo -e '\n. {{ asdf_root }}/asdf.sh' >> {{ home }}/.bashrc"
        - shell: "echo -e '\n. {{ asdf_root }}/completions/asdf.bash' >> {{ home }}/.bashrc"
        - shell: "echo -e '\n. {{ asdf_root }}/asdf.sh' >> {{ home }}/.zshrc"
        - shell: "echo -e '\n. {{ asdf_root }}/completions/asdf.bash' >> {{ home }}/.zshrc"

    - name: Update Project
      shell: "{{ asdf }} update"

    - name: Add plugins
      command: "{{asdf}} plugin-add {{item.lang}} {{item.url}}"
      with_items:
        - "{{ sdks }}"

    - name: Install versions
      command: "{{asdf}} install {{ item.lang }} {{ item.version }}"
      with_items:
        - "{{ sdks }}"
      
    - name: Install versions
      command: "{{asdf}} global {{ item.lang }} {{ item.version }}"
      with_items:
        - "{{ sdks }}"

- name: Setup local python
  hosts: localhost
  vars:
    piplibs:
      - boto3
      - click
      - pep8
      - flake8
      - requests
      - psycopg2
      - PyYAML
      - pylint
      - pipenv
  tasks:
    # TODO: check pip before trying to install? Same with pip3
    - name: Add pip
      apt: 
        state: latest
      with_items: 
        - python-pip
        - python-pip3
    - name: Add common python3 libraries
      command: "pip3 install --user {{ item }}"
      with_items: "{{ piplibs }}"
    - name: Add common python2 libraries
      command: "pip2 install --user {{ item }}"
      with_items: "{{ piplibs }}"

- name: Install Cool fonts
  hosts: localhost
  become: yes
  vars:
    font_base: /usr/share/fonts
    zipped_fonts: 
      - { name: 'firacode', url: 'https://github.com/tonsky/FiraCode/releases/download/1.205/FiraCode_1.205.zip' }
      - { name: 'hack',     url: 'https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip' }
  tasks:
    - name: Download fonts
      get_url:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.name }}.zip"
      with_items: "{{ zipped_fonts }}"

    - name: Make container Dir
      file: 
        state: directory 
        path: "{{ font_base }}/{{ item.name }}"
      with_items: "{{ zipped_fonts }}"

    - name: Unzip font
      when: "{{ item.unzip }}" == "True"
      unarchive:
        src: "/tmp/{{ item.name }}.zip"
        dest: "/tmp/{{ item.name }}"
      with_items: "{{ zipped_fonts }}"

    - name: Move font
      command: "mv '/tmp/{{ item.name }}/ttf/*.ttf' '{{ font_base }}/{{ item.name }}'"
      with_items: "{{ zipped_fonts }}"

- name: System Configuration
  hosts: localhost
  become: yes
  tasks:
    - name: Turn on SSHD
      command: "systemctl enable sshd"
    - name: Start SSHD
      command: "systemctl start sshd"
